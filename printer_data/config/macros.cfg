#NECESSARY
[pause_resume]

[force_move]
enable_force_move: True

[gcode_arcs]

[exclude_object]

[save_variables]
filename: ~/printer_data/variables.cfg

#VARIABLE INITIATE

[gcode_macro INITIATE_VARIABLES]
gcode:
    SAVE_VARIABLE VARIABLE=toogle_purge VALUE=0
    SAVE_VARIABLE VARIABLE=toogle_probe VALUE=0
    SAVE_VARIABLE VARIABLE=toogle_preheat VALUE=0
    RESPOND TYPE=command MSG='Variables Initiated'

#ENCLOSURE TEMP CONTROL

[delayed_gcode ENCLOSURE_CHECK]
initial_duration: 0
gcode:
    {% set temp = printer['temperature_sensor enclosure'].temperature %}
    #MR_NOTIFY TITLE="Temperature check" MESSAGE="{temp}"
    #RESPOND TYPE=command MSG={temp}
    #M104 S230
    #M140 S110
    {% if temp >= 60 %}
      MR_NOTIFY TITLE="Temperature check" MESSAGE="{temp} Max temperature reached, pausing print"
      RESPOND TYPE=command MSG={temp}'Max temperature reached, pausing print'
      PAUSE
    {% endif %}
    UPDATE_DELAYED_GCODE ID=ENCLOSURE_CHECK DURATION=300




#NOTIFICATION

[gcode_macro MR_NOTIFY]
description: Allows you to send a custom notification via Mobileraker without using the M117 command
gcode:
    {% set msg = "MR_NOTIFY:" ~ (params.TITLE ~ "|" if 'TITLE' in params|upper else "") ~ params.MESSAGE %}

    {% if 'MESSAGE' in params|upper %}
        { action_respond_info(msg) }
    {% else %}
        { action_raise_error('Must provide MESSAGE parameter') }
    {% endif %}

#TIMOUT

[delayed_gcode delayed_printer_off]
initial_duration: 600
gcode:
  {% if printer.idle_timeout.state == "Idle" %}
    UPDATE_DELAYED_GCODE ID=POWER_OFF_PRINTER_CHECK DURATION=30 ;Turn OFF printer
  {% else %}
    UPDATE_DELAYED_GCODE ID=delayed_printer_off DURATION=600
  {% endif %}
  

#HOME IF

[gcode_macro HOME_IF]
gcode:
    {% if printer.toolhead.homed_axes != 'xyz' %}
    	G28	#Home All Axes
    {% else %}
        RESPOND TYPE=command MSG="Printer alredy homed"
	{% endif %}

#TOOGLE
    
[gcode_macro TOOGLE_PURGE]
gcode:
    {% set svv = printer.save_variables.variables %}
    {% if svv.toogle_purge == 0 %}
      SAVE_VARIABLE VARIABLE=toogle_purge VALUE=1
      RESPOND TYPE=command MSG='LINE Purge ENABLED'
    {% else %}
      {% if svv.toogle_purge == 1 %}
        SAVE_VARIABLE VARIABLE=toogle_purge VALUE=2
        RESPOND TYPE=command MSG='VORON Purge ENABLED'
      {% else %}
        SAVE_VARIABLE VARIABLE=toogle_purge VALUE=0
        RESPOND TYPE=error MSG='Purge DISABLED'
      {% endif %}
    {% endif %}


[gcode_macro TOOGLE_PROBE]
gcode:
    {% set svv = printer.save_variables.variables %}
    {% if svv.toogle_probe == 0 %}
      SAVE_VARIABLE VARIABLE=toogle_probe VALUE=1
      RESPOND TYPE=command MSG='Probe ENABLED'
    {% else %}
      SAVE_VARIABLE VARIABLE=toogle_probe VALUE=0
      RESPOND TYPE=error MSG='Probe DISABLED'
    {% endif %}

[gcode_macro TOOGLE_PREHEAT]
gcode:
    {% set svv = printer.save_variables.variables %}
    {% if svv.toogle_preheat == 0 %}
      SAVE_VARIABLE VARIABLE=toogle_preheat VALUE=1
      RESPOND TYPE=command MSG='Preheat ENABLED'
    {% else %}
      SAVE_VARIABLE VARIABLE=toogle_preheat VALUE=0
      RESPOND TYPE=error MSG='Preheat DISABLED'
    {% endif %}

[gcode_macro STATE]
gcode:
    {% set svv = printer.save_variables.variables %}
    {% if svv.toogle_purge == 0 %}
      RESPOND TYPE=error MSG='Purge DISABLED'
    {% else %}
      {% if svv.toogle_purge == 1 %}
        RESPOND TYPE=command MSG='LINE Purge ENABLED'
      {% else %}
        RESPOND TYPE=command MSG='VORON Purge ENABLED'
      {% endif %}
    {% endif %}
    {% if svv.toogle_probe == 0 %}
      RESPOND TYPE=error MSG='Probe DISABLED'
    {% else %}
      RESPOND TYPE=command MSG='Probe ENABLED'
    {% endif %}
    {% if svv.toogle_preheat == 0 %}
      RESPOND TYPE=error MSG='Preheat DISABLED'
    {% else %}
      RESPOND TYPE=command MSG='Preheat ENABLED'
    {% endif %}

#DELAY

[gcode_macro WAIT]
gcode:
    RESPOND TYPE=error MSG='Waiting'
    M400
    G4 P10000
    RESPOND TYPE=error MSG='Finish Waiting'
    G28


    
#START/END

[gcode_macro PRINT_START]
gcode:
    {% set SET_PA = printer.configfile.config["extruder"]["pressure_advance"]|float %}
    {% set svv = printer.save_variables.variables %}
    {% set BED = params.BED|default(60)|float %}
    {% set EXTRUDER = params.EXTRUDER|default(200)|float %}
    {% set FL_SIZE = params.SIZE|default("0_0_0_0")|string %}
    
    G90 ; use absolute coordinates
    M83 ; extruder relative mode
    M104 S150 ; set temporary nozzle temp to prevent oozing during homing
    M190 S{BED} ; wait for final bed temp
    
    G28 ; home all axis
    
    #Probing
    {% if svv.toogle_probe == 1 %}
      BED_MESH_CALIBRATE
    {% else %}
      BED_MESH_PROFILE LOAD=default
    {% endif %}

    M104 S{EXTRUDER} ; set final nozzle temp
    G0 Z10 F1500 ; Z to 10mm
    G0 X-10 Y-10 F5000 ; goto x-10 y-10
    M109 S{EXTRUDER} ; wait final nozzle temp



    {% if svv.toogle_preheat == 1 %}
      M117 Waiting preheat
      RESPOND TYPE=error MSG='Waiting chamber preheating for 30 mim'
      M400
      G4 P1800000
      {% set CHAMBER_TEMP = printer['temperature_sensor enclosure'].temperature %}
      RESPOND TYPE=error MSG='Chamber temperature reach {CHAMBER_TEMP}, start printing'
      MR_NOTIFY TITLE="Chamber preheating" MESSAGE={CHAMBER_TEMP}" Chamber preheating finish, start printing"
      M117
    {% endif %}

    
    #PURGE
    G1 E10 F500 ; unretract filament
    {% if svv.toogle_purge == 1 %}
      PURGE_LINE
    {% else %}
      {% if svv.toogle_purge == 2 %}
        LINE_PURGE
      {% endif %}
    {% endif %}


[gcode_macro PURGE_LINE]
gcode:
    HOME_IF
    G0 Z1 F3000
    G0 Z0.3 F250
    G0 X0.2 F5000
    G0 Y20 F5000
    G92 E0
    G1 X0.1 Y200.0 Z0.3 F1500.0 E15 ; Draw the first line
    G1 X0.4 Y200.0 Z0.3 F5000.0 ; Move to side a little
    G1 X0.4 Y20 Z0.3 F1500.0 E30 ; Draw the second line
    G92 E0
    G1 Z2.0 F3000 ; Move Z Axis up little to prevent scratching of Heat Bed
    G1 X5 Y20 Z0.3 F5000.0 ; Move over to prevent blob squish



[gcode_macro PRINT_END]
gcode:
    M400 ; wait for buffer to clear
    G92 E0 ; zero the extruder
    G1 E-10 F1000 ; retract filament
    PRINT_END_POS
    TURN_OFF_HEATERS
    M107 ; turn off fan
    M84
    UPDATE_DELAYED_GCODE ID=POWER_OFF_PRINTER_CHECK DURATION=30 ;Turn OFF printer

[gcode_macro PRINT_END_POS]
gcode:
    G91 ; relative positioning
    # Get Boundaries
    {% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}
    {% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}
    {% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}
    # Check end position to determine safe direction to move
    {% if printer.toolhead.position.x < (max_x - 20) %}
    {% set x_safe = 20.0 %}
    {% else %}
    {% set x_safe = -20.0 %}
    {% endif %}
    {% if printer.toolhead.position.y < (max_y - 20) %}
    {% set y_safe = 20.0 %}
    {% else %}
    {% set y_safe = -20.0 %}
    {% endif %}
    {% if printer.toolhead.position.z < (max_z - 2) %}
    {% set z_safe = 10.0 %}
    {% else %}
    {% set z_safe = max_z - printer.toolhead.position.z %}
    {% endif %}
    G0 Z{z_safe} F3600 ; move nozzle up
    G0 X{x_safe} Y{y_safe} F20000 ; move nozzle to remove stringing
    G90
    G0 X0 Y220 F3600

[gcode_macro CANCEL]
gcode:
    CANCEL_PRINT
    PRINT_END_POS
    M84

    
#G90 ; use absolute coordinates
#M83 ; extruder relative mode
#M140 S[bed_temperature_initial_layer_single] ; set final bed temp
#M104 S150 ; set temporary nozzle temp to prevent oozing during homing
#G4 S10 ; allow partial nozzle warmup
#G28 ; home all axis
#BED_MESH_PROFILE LOAD=default
#G1 Z20 F1500
#G0 X-10 Y-10 F5000
#M104 S[nozzle_temperature_initial_layer] ; set final nozzle temp
#M190 S[bed_temperature_initial_layer_single] ; wait for bed temp to stabilize
#M109 S[nozzle_temperature_initial_layer] ; wait for nozzle temp to stabilize
#G0 Z1 F3000
#G0 Z0.3 F250
#G0 X0.2 F5000
#G0 Y20 F5000
#G92 E0
#G1 X0.1 Y200.0 Z0.3 F1500.0 E15 ; Draw the first line
#G1 X0.4 Y200.0 Z0.3 F5000.0 ; Move to side a little
#G1 X0.4 Y20 Z0.3 F1500.0 E30 ; Draw the second line
#G92 E0
#G1 Z2.0 F3000 ; Move Z Axis up little to prevent scratching of Heat Bed
#G1 X5 Y20 Z0.3 F5000.0 ; Move over to prevent blob squish


#POWER

[delayed_gcode POWER_OFF_PRINTER_CHECK]
gcode:
  {% if printer.idle_timeout.state == "Idle" or printer.idle_timeout.state == "Ready" %}
    {% if printer.extruder.temperature < 50.0 and printer.heater_bed.temperature < 50.0 %}
        {% if printer.extruder.target == 0.0 and printer.heater_bed.target == 0.0 %}
            UPDATE_DELAYED_GCODE ID=POWER_OFF_PRINTER_CHECK DURATION=0
            RESPOND TYPE=error MSG='Printer turned OFF'
            _PRINTER_OFF
        {% else %}
            UPDATE_DELAYED_GCODE ID=POWER_OFF_PRINTER_CHECK DURATION=2
        {% endif %}
    {% else %}
        {% if printer.idle_timeout.state == "Printing" %}
            UPDATE_DELAYED_GCODE ID=POWER_OFF_PRINTER_CHECK DURATION=0
        {% else %}
            {% if printer.extruder.target == 0.0 and printer.heater_bed.target == 0.0 %}
                UPDATE_DELAYED_GCODE ID=POWER_OFF_PRINTER_CHECK DURATION=2
            {% else %}
                UPDATE_DELAYED_GCODE ID=POWER_OFF_PRINTER_CHECK DURATION=0
            {% endif %}
        {% endif %}
    {% endif %}
  {% endif %}

# Turn on PSU
[gcode_macro _PRINTER_ON]
gcode:
  # Moonraker action
  {action_call_remote_method('set_device_power',
                             device='printer',
                             state='on')}

# Turn off PSU
[gcode_macro _PRINTER_OFF]
gcode:
  # Moonraker action
  {action_call_remote_method('set_device_power',
                             device='printer',
                             state='off')}

#BEEP

[gcode_macro m300]
description: Emits and audible beep.
  Usage: M300 [P<duration>] [S<frequency>]
gcode:
  {% set settings = printer.configfile.settings %}
  {% if "output_pin beeper" in printer %}
    {% set P = (params.P|default(100)|int, 0)|max %}
    {% set S = (params.S|default(1000)|int, 1)|max %}
    SET_PIN PIN=beeper VALUE={% if settings["output_pin beeper"].pwm %}{
        settings["output_pin beeper"].scale|default(1.0) * 0.5
      } CYCLE_TIME={ 1.0 / S }{% else %}1{% endif %}
    G4 P{P}
    SET_PIN PIN=beeper VALUE=0
  {% else %}
    {action_respond_info(
       "M300 is disabled. To enable create an [output_pin beeper] config.")}
  {% endif %}


#NEOPIXEL WS2812B

[neopixel light]
pin: PA8
chain_count: 12
color_order: GRB
initial_RED: 0
initial_GREEN: 0
initial_BLUE: 0

[gcode_macro TOOGLE_LIGHT]
variable_toogle_light: 0
gcode:
    {% if printer["gcode_macro TOOGLE_LIGHT"].toogle_light == 0 %}
      SET_LED LED="light" RED=1 GREEN=1 BLUE=0.5882 SYNC=0 TRANSMIT=1
      SET_GCODE_VARIABLE MACRO=TOOGLE_LIGHT VARIABLE=toogle_light VALUE=1
      RESPOND TYPE=command MSG='Led ENABLED'
      UPDATE_DELAYED_GCODE ID=LIGHT_OFF DURATION=60
    {% else %}
      SET_LED LED="light" RED=0 GREEN=0 BLUE=0 SYNC=0 TRANSMIT=1
      SET_GCODE_VARIABLE MACRO=TOOGLE_LIGHT VARIABLE=toogle_light VALUE=0
      RESPOND TYPE=error MSG='Led DISABLED'
    {% endif %}
  
[delayed_gcode LIGHT_OFF]
gcode:
    {% if printer["gcode_macro TOOGLE_LIGHT"].toogle_light == 1 %}
      SET_LED LED="light" RED=0 GREEN=0 BLUE=0 SYNC=0 TRANSMIT=1
      SET_GCODE_VARIABLE MACRO=TOOGLE_LIGHT VARIABLE=toogle_light VALUE=0
      RESPOND TYPE=error MSG='Led AUTO DISABLED'
    {% endif %}

#FILAMENT

[gcode_macro LOW_TEMP_CHECK]
description: Check if temperature is reach otherwise start heating
  Usage: LOW_TEMP_CHECK [T<temperature>]
gcode: 
    {% set T = params.T|default(230)|float %}
    {% if printer.extruder.target != 0 %} # if there is a setpoint for extruder
        {% if printer.extruder.temperature < printer.extruder.target %} # if not reached, heat
            RESPOND TYPE=error MSG='Heating from '{printer.extruder.temperature}' to '{printer.extruder.target}
            M117 Heating from {printer.extruder.temperature} to {printer.extruder.target}.
            M109 S{printer.extruder.target|float}
            M117
        {% endif %}
    {% else %} # if no setpoint for extruder
        {% if printer.extruder.target < T %}  # heat to T.
            RESPOND TYPE=error MSG='No setpoint, heating to '{T}
            M117 No setpoint, heating to {T}.
            M109 S{T}
            M117
        {% endif %}
    {% endif %}


# load filament
[gcode_macro M701]
description: Load Filament
  Usage: M701 [S<temperature>] [L<lenght>]
gcode:
    {% set L = params.L|default(100)|float %}
    {% set S = params.S|default(220)|float %}
    SAVE_GCODE_STATE NAME=loading_filament
    M117 Loading Filament
    HOME_IF
    G90
    G0 Z70 F3000
    G0 X-10 Y-10 F10000
    M83
    G92 E0.0
    RESPOND TYPE=error MSG='Heating from '{printer.extruder.temperature}' to '{S}
    M109 S{S}
    #LOW_TEMP_CHECK T={S}
    M300 #beep
    G1 E100 F100  # length of bowden tube till cold-end (~420mm) 
    G1 E{L} F200  # some extra to prime the nozzle --> slower 
    G92 E0.0
    M300 #beep
    RESTORE_GCODE_STATE NAME=loading_filament
  

#unload filament
[gcode_macro M702]
description: Unload Filament
  Usage: M701 [S<temperature>]
gcode:
    {% set S = params.S|default(220)|float %}
    SAVE_GCODE_STATE NAME=unloading_filament
    M117 Unloading Filament 
    {% if printer.extruder.temperature < S %} # if not reached, heat
      RESPOND TYPE=error MSG='Heating from '{printer.extruder.temperature}' to '{S}
      M109 S{S}
    {% endif %}
    #LOW_TEMP_CHECK T={S}
    G91 # set relative
    G92 E0.0
    G1 E-100 F500 # the E is the length of the bowden tube (150) + 50 mm. 
    G92 E0.0
    M300
    RESTORE_GCODE_STATE NAME=unloading_filament

#LCD MENUS

[menu __main __octoprint]
type: disabled

[menu __main __filament __loadf]
type: disabled

[menu __main __filament __loads]
type: disabled

[menu __main __filament __unloadf]
type: disabled

[menu __main __filament __unloads]
type: disabled

#PLA

[menu __main __filament __pla]
type: list
name: PLA

[menu __main __filament __pla __loadpla]
type: command
name: Load
gcode:
    M701 S=200 L=100

[menu __main __filament __pla __unloadpla]
type: command
name: Unload
gcode:
    M702 S200

#PETG

[menu __main __filament __petg]
type: list
name: PETG

[menu __main __filament __petg __loadpetg]
type: command
name: Load
gcode:
    M701 S=230 L=100

[menu __main __filament __petg __unloadpetg]
type: command
name: Unload
gcode:
    M702 S230

#ABS

[menu __main __filament __abs]
type: list
name: PLA

[menu __main __filament __abs __loadabs]
type: command
name: Load
gcode:
    M701 S=250 L=100

[menu __main __filament __abs __unloadabs]
type: command
name: Unload
gcode:
    M702 S250

[menu __main __print]
type: command
name: Pause
gcode:
    PAUSE

[menu __main __print]
type: command
name: Resume
gcode:
    RESUME

[menu __main __print]
type: command
name: Cancel
gcode:
    CANCEL



## Client variable macro for your printer.cfg
[gcode_macro _CLIENT_VARIABLE]
variable_use_custom_pos   : True ; use custom park coordinates for x,y [True/False]
variable_custom_park_x    : 0.0   ; custom x position; value must be within your defined min and max of X
variable_custom_park_y    : 220.0   ; custom y position; value must be within your defined min and max of Y
variable_custom_park_dz   : 10.0   ; custom dz value; the value in mm to lift the nozzle when move to park position
variable_retract          : 5.0   ; the value to retract while PAUSE
variable_cancel_retract   : 5.0   ; the value to retract while CANCEL_PRINT
variable_speed_retract    : 20.0  ; retract speed in mm/s
variable_unretract        : 5.0   ; the value to unretract while RESUME
variable_speed_unretract  : 20.0  ; unretract speed in mm/s
#variable_speed_hop        : 15.0  ; z move speed in mm/s
#variable_speed_move       : 100.0 ; move speed in mm/s
variable_park_at_cancel   : True ; allow to move the toolhead to park while execute CANCEL_PRINT [True/False]
#variable_park_at_cancel_x : None  ; different park position during CANCEL_PRINT [None/Position as Float]; park_at_cancel must be True
#variable_park_at_cancel_y : None  ; different park position during CANCEL_PRINT [None/Position as Float]; park_at_cancel must be True
## !!! Caution [firmware_retraction] must be defined in the printer.cfg if you set use_fw_retract: True !!!
#variable_use_fw_retract   : False ; use fw_retraction instead of the manual version [True/False]
#variable_idle_timeout     : 0     ; time in sec until idle_timeout kicks in. Value 0 means that no value will be set or restored
#variable_runout_sensor    : ""    ; If a sensor is defined, it will be used to cancel the execution of RESUME in case no filament is detected.
##                                   Specify the config name of the runout sensor e.g "filament_switch_sensor runout". Hint use the same as in your printer.cfg
## !!! Custom macros, please use with care and review the section of the corresponding macro.
## These macros are for simple operations like setting a status LED. Please make sure your macro does not interfere with the basic macro functions.
## Only  single line commands are supported, please create a macro if you need more than one command.
#variable_user_pause_macro : ""    ; Everything insight the "" will be executed after the klipper base pause (PAUSE_BASE) function
#variable_user_resume_macro: ""    ; Everything insight the "" will be executed before the klipper base resume (RESUME_BASE) function
#variable_user_cancel_macro: ""    ; Everything insight the "" will be executed before the klipper base cancel (CANCEL_PRINT_BASE) function
gcode:
